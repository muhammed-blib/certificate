Display the number of states present in the LocationTable.
Copy
SELECT COUNT(DISTINCT State) AS "Number of States" FROM LocationTable;
How many products are of regular type?
Copy
SELECT COUNT(*) AS "Number of Regular Products" FROM ProductTable WHERE Type = 'Regular';
How much spending has been done on marketing of product ID 1?
Copy
SELECT SUM(Marketing) AS "Total Marketing Spend" FROM FactTable WHERE ProductID = 1;
What is the minimum sales of a product?
Copy
SELECT MIN(Sales) AS "Minimum Sales" FROM FactTable;
Display the max Cost of Good Sold (COGS).
Copy
SELECT MAX(COGS) AS "Maximum COGS" FROM FactTable;
Display the details of the product where product type is coffee.
Copy
SELECT * FROM ProductTable WHERE Type = 'Coffee';
Display the details where total expenses are greater than 40.
Copy
SELECT * FROM FactTable WHERE [Total Expenses] > 40;
What is the average sales in area code 719?
Copy
SELECT AVG(Sales) AS "Average Sales" FROM FactTable WHERE [Area Code] = 719;
Find out the total profit generated by Colorado state.
Copy
SELECT SUM(Profit) AS "Total Profit" FROM FactTable JOIN LocationTable ON FactTable.[Area Code] = LocationTable.[Area Code] WHERE State = 'Colorado';
Display the average inventory for each product ID.
Copy
SELECT ProductID, AVG(Inventory) AS "Average Inventory" FROM FactTable GROUP BY ProductID;
Display state in a sequential order in a Location Table.
Copy
SELECT State FROM LocationTable ORDER BY State;
Display the average budget of the Product where the average budget margin should be greater than 100.
Copy
SELECT AVG([Budget Profit]) AS "Average Budget" FROM FactTable WHERE [Budget Margin] > 100;
What is the total sales done on date 2010-01-01?
Copy
SELECT SUM(Sales) AS "Total Sales" FROM FactTable WHERE Date = '2010-01-01';
Display the average total expense of each product ID on an individual date.
Copy
SELECT ProductID, Date, AVG([Total Expenses]) AS "Average Total Expense" FROM FactTable GROUP BY ProductID, Date;
Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.
stylus
Copy
SELECT FactTable.Date, FactTable.ProductID, ProductTable.Product_Type, ProductTable.Product, FactTable.Sales, FactTable.Profit, LocationTable.State, FactTable.[Area Code] FROM FactTable JOIN ProductTable ON FactTable.ProductID = ProductTable.ProductID JOIN LocationTable ON FactTable.[Area Code] = LocationTable.[Area Code];
Display the rank without any gap to show the sales wise rank.
Copy
SELECT *, DENSE_RANK() OVER (ORDER BY Sales DESC) AS "Sales Rank" FROM FactTable;
Find the state wise profit and sales.
n1ql
Copy
SELECT LocationTable.State, SUM(FactTable.Sales) AS "Total Sales", SUM(FactTable.Profit) AS "Total Profit" FROM FactTable JOIN LocationTable ON FactTable.[Area Code] = LocationTable.[Area Code] GROUP BY LocationTable.State;
Find the state wise profit and sales along with the product name.
n1ql
Copy
SELECT LocationTable.State, ProductTable.Product, SUM(FactTable.Sales) AS "Total Sales", SUM(FactTable.Profit) AS "Total Profit" FROM FactTable JOIN LocationTable ON FactTable.[Area Code] = LocationTable.[Area Code] JOIN ProductTable ON FactTable.ProductID = ProductTable.ProductID GROUP BY LocationTable.State, ProductTable.Product;
If there is an increase in sales of 5%, calculate the increased sales.
Copy
SELECT *, Sales*1.05 AS "Increased Sales" FROM FactTable;
Find the maximum profit along with the product ID and product type.
n1ql
Copy
SELECT TOP 1 FactTable.ProductID, ProductTable.Product_Type, MAX(FactTable.Profit) AS "Maximum Profit" FROM FactTable JOIN ProductTable ON FactTable.ProductID = ProductTable.ProductID GROUP BY FactTable.ProductID, ProductTable.Product_Type ORDER BY "Maximum Profit" DESC;
Create a stored procedure to fetch the result according to the product type from Product Table.
oxygene
Copy
CREATE PROCEDURE GetProductInfoByType
    @ProductType VARCHAR(50)
AS
BEGIN
    SELECT * FROM ProductTable WHERE Product_Type = @ProductType;
END;
Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
n1ql
Copy
SELECT *, CASE WHEN [Total Expenses] < 60 THEN 'Profit' ELSE 'Loss' END AS "Profit/Loss" FROM FactTable;
Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
pgsql
Copy
SELECT CONVERT(VARCHAR(10), Date, 110) AS "Date", ProductID, SUM(Sales) AS "Weekly Sales" FROM FactTable GROUP BY CONVERT(VARCHAR(10), Date, 110), ProductID WITH ROLLUP;
Apply union and intersection operator on the tables which consist of attribute area code.
pgsql
Copy
-- UNION
SELECT * FROM FactTable WHERE [Area Code] = 719
UNION
SELECT * FROM FactTable WHERE [Area Code] = 720;

-- INTERSECTION
SELECT * FROM FactTable WHERE [Area Code] = 719
INTERSECT
SELECT * FROM FactTable WHERE [Area Code] = 720;
Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference.
less
Copy
CREATE FUNCTION GetProductByType
(
    @ProductType VARCHAR(50)
)
RETURNS TABLE
AS
RETURN
    SELECT * FROM ProductTable WHERE Product_Type = @ProductType;
Change the product type from coffee to tea where product ID is 1 and undo it.
pgsql
Copy
-- Change Product Type to Tea
UPDATE ProductTable SET Product_Type = 'Tea' WHERE ProductID = 1;

-- Undo the Change
UPDATE ProductTable SET Product_Type = 'Coffee' WHERE ProductID = 1;
Display the date, product ID and sales where total expenses are between 100 to 200.
Copy
SELECT Date, ProductID, Sales FROM FactTable WHERE [Total Expenses] BETWEEN 100 AND 200;
Delete the records in the Product Table for regular type.
Copy
DELETE FROM ProductTable WHERE Type = 'Regular';
Display the ASCII value of the fifth character from the column Product.
Copy
SELECT ASCII(SUBSTRING(Product, 5, 1)) AS "ASCII Value" FROM ProductTable;


